
import asyncio
import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from config import BOT_TOKEN, CHAT_ID, api_key, api_exchange
from pogodaTor import WeatherAPI, weather_text
from xchange010 import CurrencyConverter, exchange_text

now0 = datetime.datetime.now()
print(now0)
#CHAT_ID = CHAT_ID_TORA
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

async def send_weather_message():
    await bot.send_message(CHAT_ID, weather_text)

async def send_exchange_message():
    await bot.send_message(CHAT_ID, exchange_text)

@dp.chat_member_handler()
async def greet_new_member(message: types.ChatMemberUpdated):
    new_members = message.new_chat_members
    for member in new_members:
        greeting_message = await bot.send_message(CHAT_ID, f"–ü—Ä–∏–≤–µ—Ç, {member.first_name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç üì¢–¢–æ—Ä—Ä–µ–≤—å–µ—Ö–∞!\n"
                                               f"\n"
                                               f"–ü–æ–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!\n"
                                               f"\n"
                                               f"üìç–ú—ã —Å–æ–±—Ä–∞–ª–∏ –∑–¥–µ—Å—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∞–º—ã—Ö –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏—è—Ö, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –∂–∏–∑–Ω—å—é –≤ –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–º –≥–æ—Ä–æ–¥–µ –¢–æ—Ä—Ä–µ–≤—å–µ—Ö–∞.\n"
                                               f"\n"
                                               f"–ï—Å–ª–∏ –≤—ã –∏—â–µ—Ç–µ –∞—Ä–µ–Ω–¥—É –∂–∏–ª—å—èüè°, –ø—Ä–æ–¥–∞–∂—É –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏, —Ä–∞–±–æ—Ç—É, —É—Å–ª—É–≥–∏üõ† –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Ö–æ—Ç–∏—Ç–µ –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ –Ω–æ–≤–æ—Å—Ç–µ–π, —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª - –∏–¥–µ–∞–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ –¥–ª—è –≤–∞—Å.")
        await asyncio.sleep(120)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ 5 –º–∏–Ω—É—Ç (300 —Å–µ–∫—É–Ω–¥)
        print(f"{member.first_name}")
        await greeting_message.delete()

async def send_messages_periodically():
    while True:
        now = datetime.datetime.now()
        if now.hour == 13 and now.minute == 15:
            await send_weather_message()
        elif now.hour == 15 and now.minute == 00:
            await send_exchange_message()
        await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É


if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    loop.create_task(send_messages_periodically())
    executor.start_polling(dp, loop=loop)
