import requests

from typing import List, Dict, Union, Optional
from datetime import datetime, timedelta, date, time

from source.config import WEATHER_API


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∂–µ–ª–∞–Ω–∏—è —Ö–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –ø–æ–≥–æ–¥–Ω–æ–≥–æ —è–≤–ª–µ–Ω–∏—è
def get_wish(main):
    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å –ø–æ–∂–µ–ª–∞–Ω–∏—è–º–∏ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ —Å–º–∞–π–ª–∏–∫–∞–º–∏
    wishes = {
        "Clear": "–ñ–µ–ª–∞—é —Ç–µ–±–µ —Å–æ–ª–Ω–µ—á–Ω–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è! ‚òÄÔ∏è",
        "Clouds": "–ü—É—Å—Ç—å —Ç—É—á–∏ –Ω–µ –∑–∞—Ç–º–µ–≤–∞—é—Ç —Ç–≤–æ–π —Å–≤–µ—Ç! ‚òÅÔ∏è",
        "Rain": "–ù–µ –ø—Ä–æ–º–æ–∫–Ω–∏! üåßÔ∏è",
        "Snow": "–°–Ω–µ–≥–æ–≤–∏–∫–æ–≤ –Ω–µ –∑–∞–±—É–¥—å —Å–ª–µ–ø–∏—Ç—å! ‚ùÑÔ∏è",
        "Thunderstorm": "–ë—É–¥—å –æ—Å—Ç–æ—Ä–æ–∂–µ–Ω –Ω–∞ —É–ª–∏—Ü–µ! ‚õàÔ∏è",
        "Drizzle": "–ù–µ –∑–∞–±—É–¥—å –∑–æ–Ω—Ç! üå¶Ô∏è",
        "Mist": "–û—Å—Ç–µ—Ä–µ–≥–∞–π—Å—è —Ç—É–º–∞–Ω–Ω—ã—Ö —Å—É—â–µ—Å—Ç–≤! üå´Ô∏è",
        "Smoke": "–î—ã—à–∏ –ø–æ–ª–Ω–æ–π –≥—Ä—É–¥—å—é! üå´Ô∏è",
        "Haze": "–ù–µ –∑–∞–±–ª—É–¥–∏—Å—å –≤ –¥—ã–º–∫–µ! üå´Ô∏è",
        "Dust": "–ü—ã–ª—å –Ω–µ –ª—É—á—à–∏–π –∞–∫—Å–µ—Å—Å—É–∞—Ä! üí®",
        "Fog": "–ù–µ —Ç–µ—Ä—è–π—Å—è –≤ —Ç—É–º–∞–Ω–µ! üå´Ô∏è",
        "Sand": "–ü–µ—Å–æ–∫ - —ç—Ç–æ –Ω–µ —Ç–æ–ª—å–∫–æ –Ω–∞ –ø–ª—è–∂–µ! üèñÔ∏è",
        "Ash": "–í—É–ª–∫–∞–Ω—ã –Ω–µ —à—É—Ç—è—Ç! üåã",
        "Squall": "–î–µ—Ä–∂–∏—Å—å –∫—Ä–µ–ø—á–µ! üå¨Ô∏è",
        "Tornado": "–£–∫—Ä–æ–π—Å—è –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º –º–µ—Å—Ç–µ! üå™Ô∏è"
    }
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–∂–µ–ª–∞–Ω–∏–µ –ø–æ –∫–ª—é—á—É –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –ø–æ–∂–µ–ª–∞–Ω–∏–µ
    return wishes.get(main, "–ñ–µ–ª–∞—é —Ç–µ–±–µ —Ö–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —É–≥–ª–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–µ—Ç—Ä–∞ –≤ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω—ã —Å–≤–µ—Ç–∞
def get_wind_direction(deg):
    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ —Å—Ç–æ—Ä–æ–Ω —Å–≤–µ—Ç–∞
    directions = ["–°–µ–≤–µ—Ä–Ω—ã–π", "–°–µ–≤–µ—Ä–æ-–≤–æ—Å—Ç–æ—á–Ω—ã–π", "–í–æ—Å—Ç–æ—á–Ω—ã–π", "–Æ–≥–æ-–≤–æ—Å—Ç–æ—á–Ω—ã–π", "–Æ–∂–Ω—ã–π", "–Æ–≥–æ-–∑–∞–ø–∞–¥–Ω—ã–π", "–ó–∞–ø–∞–¥–Ω—ã–π", "–°–µ–≤–µ—Ä–æ-–∑–∞–ø–∞–¥–Ω—ã–π"]
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω–¥–µ–∫—Å —Å—Ç–æ—Ä–æ–Ω—ã —Å–≤–µ—Ç–∞ –ø–æ —É–≥–ª—É
    index = round(deg / 45) % 8
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω—ã —Å–≤–µ—Ç–∞
    return directions[index]

def get_weather_forecast(target_date: date, target_time: time, city_name: str = 'Torrevieja') -> List[Dict[str, Union[date, time, float, int, Optional[int], str, int]]]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –∏ –≤—Ä–µ–º–µ–Ω–∏.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        - target_date (date): –¶–µ–ª–µ–≤–∞—è –¥–∞—Ç–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã.
        - target_time (time): –¶–µ–ª–µ–≤–æ–µ –≤—Ä–µ–º—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã.
        - city_name (str): –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 'Torrevieja').

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π, —Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥–Ω–æ–∑–µ –ø–æ–≥–æ–¥—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –∏ –≤—Ä–µ–º–µ–Ω–∏.
        –ö–∞–∂–¥—ã–π —Å–ª–æ–≤–∞—Ä—å –≤ —Å–ø–∏—Å–∫–µ –∏–º–µ–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ –∫–ª—é—á–∏:
            - "date" (date): –î–∞—Ç–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã.
            - "time" (time): –í—Ä–µ–º—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã.
            - "temperature" (float): –¢–µ–∫—É—â–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞.
            - "max_temperature" (float): –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞.
            - "min_temperature" (float): –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞.
            - "humidity" (int): –í–ª–∞–∂–Ω–æ—Å—Ç—å –≤–æ–∑–¥—É—Ö–∞ (–≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö).
            - "pressure" (int): –ê—Ç–º–æ—Å—Ñ–µ—Ä–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ (–≤ –≥–µ–∫—Ç–æ–ø–∞—Å–∫–∞–ª—è—Ö).
            - "visibility" (Optional[int]): –í–∏–¥–∏–º–æ—Å—Ç—å (–≤ –º–µ—Ç—Ä–∞—Ö), –º–æ–∂–µ—Ç –±—ã—Ç—å None.
            - "wind_speed" (float): –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ (–≤ –º/—Å).
            - "wind_direction_deg" (int): –£–≥–æ–ª –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–µ—Ç—Ä–∞ –≤ –≥—Ä–∞–¥—É—Å–∞—Ö.
            - "wind_direction" (str): –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω—ã —Å–≤–µ—Ç–∞, –æ—Ç–∫—É–¥–∞ –¥—É–µ—Ç –≤–µ—Ç–µ—Ä.
            - "sunrise" (time): –í—Ä–µ–º—è –≤–æ—Å—Ö–æ–¥–∞ —Å–æ–ª–Ω—Ü–∞.
            - "sunset" (time): –í—Ä–µ–º—è –∑–∞–∫–∞—Ç–∞ —Å–æ–ª–Ω—Ü–∞.
            - "city_name" (str): –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞.
            - "description" (str): –û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–≥–æ–¥—ã.
            - "cloudiness" (int): –û–±–ª–∞—á–Ω–æ—Å—Ç—å (–≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö).

    –ü—Ä–∏–º–µ—á–∞–Ω–∏—è:
        - –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è OpenWeatherMap API.
        - –î–ª—è —Ä–∞–±–æ—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞–ª–∏—á–∏–µ –¥–µ–π—Å—Ç–≤—É—é—â–µ–≥–æ –∫–ª—é—á–∞ API (WEATHER_API).
        - –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π, —Ç–∞–∫ –∫–∞–∫ –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ —Ä–∞–∑–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã –≤—Ä–µ–º–µ–Ω–∏ –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è.
        - –ï—Å–ª–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫.

    –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
        target_date = date(2023, 7, 7)
        target_time = time(8, 50)
        forecast = get_weather_forecast(target_date, target_time, city_name='Torrevieja')
        for info in forecast:
            print(f"–î–∞—Ç–∞: {info['date']}, –í—Ä–µ–º—è: {info['time']}, –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {info['temperature']}, –û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–≥–æ–¥—ã: {info['description']}")
    """
    # –û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–≥–æ–¥—ã –∏ –æ–±–ª–∞—á–Ω–æ—Å—Ç—å –¥–ª—è –∫–æ–¥–æ–≤ –ø—Ä–æ–≥–Ω–æ–∑–∞ OpenWeatherMap
    weather_codes = {
        "01": "–Ø—Å–Ω–æ",
        "02": "–ú–∞–ª–æ–æ–±–ª–∞—á–Ω–æ",
        "03": "–û–±–ª–∞—á–Ω–æ —Å –ø—Ä–æ—è—Å–Ω–µ–Ω–∏—è–º–∏",
        "04": "–û–±–ª–∞—á–Ω–æ",
        "09": "–õ–∏–≤–µ–Ω—å",
        "10": "–î–æ–∂–¥—å",
        "11": "–ì—Ä–æ–∑–∞",
        "13": "–°–Ω–µ–≥",
        "50": "–¢—É–º–∞–Ω"
    }

    base_url = "http://api.openweathermap.org/data/2.5/forecast"
    params = {
        "q": city_name,
        "appid": WEATHER_API,
        "units": "metric",
        "lang": "ru"
    }

    response = requests.get(base_url, params=params)
    data = response.json()

    forecast_data = []
    city_data = data["city"]
    for forecast in data["list"]:
        forecast_datetime = datetime.fromtimestamp(forecast["dt"])
        forecast_date = forecast_datetime.date()
        forecast_time = forecast_datetime.time()
        if forecast_date == target_date and forecast_time == target_time:
            forecast_info = {
                "date": forecast_date,
                "time": forecast_time,
                "temperature": forecast["main"]["temp"],
                "max_temperature": forecast["main"]["temp_max"],
                "min_temperature": forecast["main"]["temp_min"],
                "humidity": forecast["main"]["humidity"],
                "pressure": forecast["main"]["pressure"],
                "visibility": forecast.get("visibility"),
                "wind_speed": forecast["wind"]["speed"],
                "wind_direction_deg": forecast["wind"]["deg"],
                "wind_direction": get_wind_direction(forecast["wind"]["deg"]),
                "sunrise": datetime.fromtimestamp(city_data["sunrise"]).time(),
                "sunset": datetime.fromtimestamp(city_data["sunset"]).time(),
                "city_name": city_data["name"],
                "description": weather_codes.get(forecast["weather"][0]["icon"][:2]),
                "cloudiness": forecast["clouds"]["all"]
            }

            forecast_data.append(forecast_info)

    return forecast_data