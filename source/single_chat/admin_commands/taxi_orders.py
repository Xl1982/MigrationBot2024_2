'''–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–∞—Ö —Ç–∞–∫—Å–∏'''
import math

from aiogram import types
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.dispatcher import FSMContext


from database.operations.taxi_orders import TaxiOrder

from source.bot_init import dp, bot
from source.single_chat.admin_commands.start import info_handler


def make_back_button():
    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    keyboard = types.InlineKeyboardMarkup() 
    keyboard.add(types.InlineKeyboardButton('–í—ã—Ö–æ–¥', callback_data='exit'))
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    return keyboard

# –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è —Å –∑–∞–∫–∞–∑–∞–º–∏ —Ç–∞–∫—Å–∏
def make_taxi_keyboard():
    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    keyboard = types.InlineKeyboardMarkup()
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–æ–ª–ª–±—ç–∫-–¥–∞–Ω–Ω—ã–º–∏
    keyboard.add(types.InlineKeyboardButton("–ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑", callback_data="last_order"))
    keyboard.add(types.InlineKeyboardButton("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤", callback_data="order_count"))
    keyboard.add(types.InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤", callback_data="choose_orders"))
    keyboard.add(types.InlineKeyboardButton('–í—ã—Ö–æ–¥', callback_data='exit'))
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    return keyboard


# –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ª–∏—Å—Ç–∞–Ω–∏—è
def make_pagination_keyboard(limit, offset, total_orders):
    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    keyboard = types.InlineKeyboardMarkup()
    
    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫
    buttons = []
    
    # –ï—Å–ª–∏ offset –±–æ–ª—å—à–µ –Ω—É–ª—è, —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" —Å callback_data –≤ –≤–∏–¥–µ limit:offset-limit
    if offset > 0:
        buttons.append(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"{limit}:{offset-limit}"))
    
    # –ï—Å–ª–∏ offset –ø–ª—é—Å limit –º–µ–Ω—å—à–µ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–∫–∞–∑–æ–≤, —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–í–ø–µ—Ä–µ–¥" —Å callback_data –≤ –≤–∏–¥–µ limit:offset+limit
    if offset + limit < total_orders:
        buttons.append(types.InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"{limit}:{offset+limit}"))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard.add(*buttons)
    keyboard.add(types.InlineKeyboardButton('–í—ã—Ö–æ–¥', callback_data='exit'))

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    return keyboard


# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª–∞—Å—Å StatesGroup —Å —Ä–∞–∑–Ω—ã–º–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏
class OrderStates(StatesGroup):
    waiting_for_count = State()

@dp.callback_query_handler(lambda c: c.data == 'exit', state=OrderStates.waiting_for_count)
async def exit_from_taxi_info(callback: types.CallbackQuery, state: FSMContext):
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await bot.delete_message(callback.message.chat.id, callback.message.message_id)
    await info_handler(callback.message)
    await state.finish()


@dp.callback_query_handler(lambda c: c.data == 'exit')
async def exit_from_taxi_info(callback: types.CallbackQuery):
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await bot.delete_message(callback.message.chat.id, callback.message.message_id)
    await info_handler(callback.message)
    
        

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–ª–ª–±—ç–∫-–∑–∞–ø—Ä–æ—Å–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ 'taxi'
@dp.callback_query_handler(lambda c: c.data == 'taxi')
async def give_choose_taxi(callback: types.CallbackQuery):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await bot.send_message(callback.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –∑–∞–∫–∞–∑–∞–º–∏ —Ç–∞–∫—Å–∏:", reply_markup=make_taxi_keyboard())
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await bot.delete_message(callback.message.chat.id, callback.message.message_id)

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–ª–ª–±—ç–∫-–∑–∞–ø—Ä–æ—Å–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ 'last_order'
@dp.callback_query_handler(lambda c: c.data == 'last_order')
async def show_last_order(callback: types.CallbackQuery):
    taxi_order = TaxiOrder()
    last_order = taxi_order.get_last_order()
    
    keyboard = make_back_button()

    if last_order:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å markdown-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        text = f"üöï –ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑:\n\n" \
            f"**–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:** {last_order['order_id']}\n" \
            f"**ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:** {last_order['user_id']}\n" \
            f"**–í—Ä–µ–º—è –∑–∞–∫–∞–∑–∞:** {last_order['order_time']}\n" \
            f"**–û—Ç–∫—É–¥–∞:** {last_order['order_from']}\n" \
            f"**–ö—É–¥–∞:** {last_order['order_to']}\n" \
            f"**–¢–µ–ª–µ—Ñ–æ–Ω:** {last_order['phone_number']}"
    else:
        text = f'–£–≤—ã, –Ω–æ –∑–∞–∫–∞–∑–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç...'
        
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –∏ —É–∫–∞–∑—ã–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä parse_mode='Markdown'
    await bot.send_message(callback.from_user.id, text, parse_mode='Markdown', reply_markup=keyboard)
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await bot.delete_message(callback.message.chat.id, callback.message.message_id)

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–ª–ª–±—ç–∫-–∑–∞–ø—Ä–æ—Å–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ 'order_count'
@dp.callback_query_handler(lambda c: c.data == 'order_count')
async def show_order_count(callback: types.CallbackQuery):
    taxi_order = TaxiOrder()
    count_orders = taxi_order.get_order_count()

    keyboard = make_back_button()

    # –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º
    await bot.send_message(callback.from_user.id, f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {count_orders}", reply_markup=keyboard)
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await bot.delete_message(callback.message.chat.id, callback.message.message_id)

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–ª–ª–±—ç–∫-–∑–∞–ø—Ä–æ—Å–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ 'choose_orders'
@dp.callback_query_handler(lambda c: c.data == 'choose_orders')
async def choose_orders(callback: types.CallbackQuery):
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–∫–∞–∑–æ–≤
    await OrderStates.waiting_for_count.set()
    
    keyboard = make_back_button()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º
    await bot.send_message(callback.from_user.id, "–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –≤—ã–≤–æ–¥–∏—Ç—å (–æ—Ç 1 –¥–æ 10): ", reply_markup=keyboard)
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await bot.delete_message(callback.message.chat.id, callback.message.message_id)

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–∫–∞–∑–æ–≤
@dp.message_handler(state=OrderStates.waiting_for_count)
async def show_orders(message: types.Message, state: FSMContext):
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –∑–∞–∫–∞–∑–æ–≤
    try:
        limit = int(message.text)
        if limit < 1 or limit > 10:
            raise ValueError
    except ValueError:
        # –ï—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—à–∏–±–∫–æ–π –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ —Ç–æ –∂–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10")
        return
    
    # –ï—Å–ª–∏ –¥–∞, —Ç–æ –ø–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ
    taxi_order = TaxiOrder()
    total_orders = taxi_order.get_order_count() # –≠—Ç–æ –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–∏—Å–ª–æ –∑–∞–∫–∞–∑–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–º–µ—â–µ–Ω–∏–µ —Ä–∞–≤–Ω—ã–º –Ω—É–ª—é
    offset = 0
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –∑–∞–¥–∞–Ω–Ω—ã–º –ª–∏–º–∏—Ç–æ–º –∏ —Å–º–µ—â–µ–Ω–∏–µ–º
    orders = taxi_order.get_orders(limit, offset)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–∫–∞–∑–∞—Ö
    if orders:
        text = f"üöï –í–æ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ {limit} –∑–∞–∫–∞–∑–æ–≤:\n\n"
        for order in orders:
            text += f"**–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:** {order['order_id']}\n" \
                    f"**ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:** {order['user_id']}\n" \
                    f"**–í—Ä–µ–º—è –∑–∞–∫–∞–∑–∞:** {order['order_time']}\n" \
                    f"**–û—Ç–∫—É–¥–∞:** {order['order_from']}\n" \
                    f"**–ö—É–¥–∞:** {order['order_to']}\n" \
                    f"**–¢–µ–ª–µ—Ñ–æ–Ω:** {order['phone_number']}\n\n"
        
        # –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
        page = offset // limit + 1
        total_pages = math.ceil(total_orders / limit)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å —Å –Ω–æ–º–µ—Ä–æ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        text += f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {total_pages}"
        
    else:
        text = '–ó–∞–∫–∞–∑–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç...'
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ª–∏—Å—Ç–∞–Ω–∏—è
    keyboard = make_pagination_keyboard(limit, offset, total_orders)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –∏ —É–∫–∞–∑—ã–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä parse_mode='Markdown'
    await message.answer(text, reply_markup=keyboard, parse_mode='Markdown')
    
# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è callback_query –æ—Ç –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫
@dp.callback_query_handler(state=OrderStates.waiting_for_count)
async def pagination_callback(call: types.CallbackQuery):
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data –≤ –≤–∏–¥–µ limit:offset
    data = call.data.split(":")
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞
    limit = int(data[0])
    offset = int(data[1])
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ
    taxi_order = TaxiOrder()
    total_orders = taxi_order.get_order_count() # –≠—Ç–æ –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–∏—Å–ª–æ –∑–∞–∫–∞–∑–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –∑–∞–¥–∞–Ω–Ω—ã–º –ª–∏–º–∏—Ç–æ–º –∏ —Å–º–µ—â–µ–Ω–∏–µ–º
    orders = taxi_order.get_orders(limit, offset)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–∫–∞–∑–∞—Ö
    if orders:
        text = f"üöï –í–æ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ {limit} –∑–∞–∫–∞–∑–æ–≤:\n\n"
        for order in orders:
            text += f"**–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:** {order['order_id']}\n" \
                    f"**ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:** {order['user_id']}\n" \
                    f"**–í—Ä–µ–º—è –∑–∞–∫–∞–∑–∞:** {order['order_time']}\n" \
                    f"**–û—Ç–∫—É–¥–∞:** {order['order_from']}\n" \
                    f"**–ö—É–¥–∞:** {order['order_to']}\n" \
                    f"**–¢–µ–ª–µ—Ñ–æ–Ω:** {order['phone_number']}\n\n"
        
        # –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
        page = offset // limit + 1
        total_pages = math.ceil(total_orders / limit)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å —Å –Ω–æ–º–µ—Ä–æ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        text += f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {total_pages}"
        
    else:
        text = '–ó–∞–∫–∞–∑–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç...'
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ª–∏—Å—Ç–∞–Ω–∏—è
    keyboard = make_pagination_keyboard(limit, offset, total_orders)
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ callback_query
    await call.answer()
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await call.message.edit_text(text, reply_markup=keyboard, parse_mode='Markdown')