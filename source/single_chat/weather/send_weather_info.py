from datetime import datetime, timedelta

from aiogram.dispatcher import FSMContext
from aiogram import types
from aiogram.dispatcher.filters.state import State, StatesGroup

from source.single_chat.start_handlers.start_handler import old_user_hello
from .get_weather_info import get_weather_forecast
from source.bot_init import dp, bot

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ —Å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –Ω–∞ —Ä—É—Å—Å–∫–∏–π
days_of_week = {
  "Monday": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
  "Tuesday": "–í—Ç–æ—Ä–Ω–∏–∫",
  "Wednesday": "–°—Ä–µ–¥–∞",
  "Thursday": "–ß–µ—Ç–≤–µ—Ä–≥",
  "Friday": "–ü—è—Ç–Ω–∏—Ü–∞",
  "Saturday": "–°—É–±–±–æ—Ç–∞",
  "Sunday": "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
}

class WeatherStates(StatesGroup):
    waiting_date = State()
    waiting_time = State()


def get_day_button_text(day):
    month_names = {
        "January": "—è–Ω–≤–∞—Ä—è",
        "February": "—Ñ–µ–≤—Ä–∞–ª—è",
        "March": "–º–∞—Ä—Ç–∞",
        "April": "–∞–ø—Ä–µ–ª—è",
        "May": "–º–∞—è",
        "June": "–∏—é–Ω—è",
        "July": "–∏—é–ª—è",
        "August": "–∞–≤–≥—É—Å—Ç–∞",
        "September": "—Å–µ–Ω—Ç—è–±—Ä—è",
        "October": "–æ–∫—Ç—è–±—Ä—è",
        "November": "–Ω–æ—è–±—Ä—è",
        "December": "–¥–µ–∫–∞–±—Ä—è",
    }

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–Ω—è
    if day == datetime.now().date():
        return "–°–µ–≥–æ–¥–Ω—è"
    elif day == datetime.now().date() + timedelta(days=1):
        return "–ó–∞–≤—Ç—Ä–∞"
    elif day == datetime.now().date() + timedelta(days=2):
        return "–ü–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞"
    else:
        return f"{day.day} {month_names[day.strftime('%B')]}"



@dp.message_handler(lambda message: message.chat.type == types.ChatType.PRIVATE and message.text == '–ü–æ–≥–æ–¥–∞')
async def choose_weather_day(message: types.Message):
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
    today = datetime.now().date()

    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –¥–Ω—è–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ (5 –¥–Ω–µ–π, –Ω–∞—á–∏–Ω–∞—è –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è)
    available_days = [today + timedelta(days=i) for i in range(5)]

    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –¥–Ω—è
    buttons = [
        types.InlineKeyboardButton(text=get_day_button_text(day), callback_data=f"day_{day.strftime('%Y-%m-%d')}")
        for day in available_days
    ]
    # –°–æ–∑–¥–∞–µ–º inline keyboard –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–Ω–æ–ø–æ–∫
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(*buttons)
    keyboard.add(types.InlineKeyboardButton('–í—ã—Ö–æ–¥', callback_data='exit'))

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å inline keyboard –∏ –ø—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—ã–±—Ä–∞—Ç—å –¥–µ–Ω—å –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã:", reply_markup=keyboard)
    await WeatherStates.waiting_date.set()


@dp.callback_query_handler(lambda query: query.message.chat.type == types.ChatType.PRIVATE and query.data.startswith("day_"),
                           state=WeatherStates.waiting_date)
async def handle_weather_day(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å –∏–∑ callback_query
    selected_day = callback_query.data.split("_")[1]

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤—É—é –¥–∞—Ç—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–Ω—è
    target_date = datetime.strptime(selected_day, "%Y-%m-%d").date()

    await state.update_data(selected_day=target_date)

    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞
    times = ["09:00", "12:00", "15:00", "18:00", "21:00"]

    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    buttons = [types.InlineKeyboardButton(text=time, callback_data=f"time_{time}") for time in times]

    # –°–æ–∑–¥–∞–µ–º inline keyboard –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–Ω–æ–ø–æ–∫
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(*buttons)
    keyboard.add(types.InlineKeyboardButton('–í—ã—Ö–æ–¥', callback_data='exit'))

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å inline keyboard –∏ –ø—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã
    await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã:", reply_markup=keyboard)
    await WeatherStates.waiting_time.set()
    await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)


@dp.callback_query_handler(lambda query: query.message.chat.type == types.ChatType.PRIVATE and query.data.startswith("time_"),
                           state=WeatherStates.waiting_time)
async def handle_weather_time(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()

    data = await state.get_data()
    selected_day = data['selected_day']
    selected_time = callback_query.data.split("_")[1]

    target_time = datetime.strptime(selected_time, "%H:%M").time()

    try:
        forecast = get_weather_forecast(selected_day, target_time)[0]
    except IndexError:
        await callback_query.message.answer('–ù–µ–ª—å–∑—è –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –ø—Ä–æ—à–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è')
        await state.finish()
        await old_user_hello(callback_query, state)
        return

    if forecast:
        response = f"–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –¥–ª—è {selected_day.strftime('%d-%m-%Y')} {target_time.strftime('%H:%M')}:\n"
        response += f"üåç –ì–æ—Ä–æ–¥: –¢–æ—Ä—Ä–µ–≤—å–µ—Ö–∞\n"
        response += f"üå°Ô∏è <b>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:</b> {forecast['temperature']}¬∞C\n"
        response += f"üíß <b>–í–ª–∞–∂–Ω–æ—Å—Ç—å:</b> {forecast['humidity']}%\n"
        response += f"üí® <b>–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞:</b> {forecast['wind_speed']} –º/—Å\n"
        response += f"üß≠ <b>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞:</b> {forecast['wind_direction']}\n"
        response += f"‚õÖ <b>–î–∞–≤–ª–µ–Ω–∏–µ:</b> {forecast['pressure']} –≥–ü–∞\n"
        response += f"üå´Ô∏è <b>–í–∏–¥–∏–º–æ—Å—Ç—å:</b> {forecast['visibility']} –º"

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–º–∞–π–ª—ã –∏ –≤—ã–¥–µ–ª–µ–Ω–∏–µ –∂–∏—Ä–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º
        # response = f"‚è∞ {selected_time} - {forecast['wish']} ‚è∞\n\n" + response

        await bot.send_message(callback_query.from_user.id, response, parse_mode="HTML")
        await state.finish()
        await old_user_hello(callback_query, state)
        await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)
    else:
        await bot.send_message(callback_query.from_user.id, "–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
        await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)



